Hello and welcome,

My name is William and today we are still talking about network flow, and in 
particular we will be looking at a specific implementation of the Ford-Fulkerson
method which is the Edmonds-Karp algorithm. The Edmonds-Karp algorithm is 
another maximum flow algorithm which uses a different technique to find 
augmenting paths through the flow graph.

Before we get started let me give you a refresher on what we're doing:
1) We are trying to find the maximum flow on a flow graph because we know that
finding the max flow is really useful for finding bipartite matchings and to 
solve a whole host of problems.
2) So far we have looked at one technique to find the max flow which is to use 
the Ford-Fulkerson method which at a high level says that all we want to do is
repeatedly find augmenting paths from s to t, augment the flow and repeat until
no more paths exist.
3) The key takeaway here is that the Ford-Fulkerson method does NOT specify HOW 
to actually find augmenting paths, so this is where optimization comes into play

[Ford-Fulkerson animation]
A few videos ago we saw what the Ford-Fulkerson method is, how it is used to 
find the maximum flow and how it can be implemented with a DFS.

[The flip graph animation]
However, we saw that the pitfall when using a DFS was that the time complexity
depends on the capacity of the edges in the graph. This is because the DFS picks
the edges to traverse in such a way that we might only ever able to push one 
unit of flow in each iteration.

This is really bad and can kill the time complexity even though it is unlikely 
to happen in practice, but it's something we absolutely want to avoid should it 
happen. Right now, the time complexity of the Ford-Fulkerson method with a DFS 
is O(E times f) where E is the number of edges and f is the maximum flow. The 
idea behind Edmonds-Karp says that instead of using a DFS to find augmenting
paths we should use a BFS and that doing this should result in a better time 
complexity of O(V time E squared). O(V time E squared) may not look like a 
better time complexity, but it actually is because the time complexity while it 
may not be great does no depend on the capacity value of any edge in the flow 
graph, and this is crucial.

The Edmonds-Karp algorithm can also be thought of as a method of augmentation 
which repeatedly finds the shortest augmenting path from s -> t (in terms of the
number of edges used) each iteration. 
Using a BFS during Edmonds-Karp ensures that we find the shortest path, because
every edge is unweighted. I say unweighted, because as long as the edge has a
positive capacity we don't distinguish between one edge being any better or
worse than any other edge.



