Hello and Welcome,
My name is William, today we're going to start tackling the field of network flow by understanding what Maximum Flow is and in particular how we can use the Ford-Fulkerson method it find it.

Finding the maximum flow begins with having a flow graph; which is a graph where edges have a certain maximum capacity which cannot be exceeded. Edges also have a flow value which is how many units of flow are passing through the edge. Initially, the flow is zero on all edges everywhere until we run a max flow algorithm. There are also two special nodes in a flow graph, the source node and the sink node, usually denoted as 's' and 't' respectively. The maximum flow problem asks: "With an infinite input source how much “flow” can we push through the network without exceeding the capacity on any edge."; and it's not at all obvious how one should figure that out.

Maximum flow can be used in numerous situations where edges and nodes can be swapped out for any number of things. For instance, suppose the edges are roads with cars, pipes with water or wires with electric current. Each of those has a certain capacity value we can associate with. The maximum flow on the other hand would represent the volume of water allowed to flow through the pipes, the number of cars the roads can sustain in traffic and net electric current. Effectively, the max flow is the “bottleneck” value for the amount of flow that can pass through the network from source to sink under all the constraints.

The max-flow for this particular network is 7, you can tell because after running the max flow algorithm the sum of the flows attached to the sink is 7. Running a maximum flow algorithm is used to determine how much flow each edge should receive to achieve the overall maximum flow. Note that there might be multiple ways of achieving the maximum flow by having flow run through different edges, but all solutions will have the same max flow value.

Let's dig deeper into how to find the maximum flow. To begin with, you will need a flow graph which consists of directed edges, also called arcs. Each directed edge has a certain capacity which can receive a certain amount of flow. At all times, the flow running through an edge must be less than or equal to the capacity. This intuitively makes sense, because if we allow more flow than what the capacity permits it means something has to go wrong. When an edge becomes over capacitated in some manner it means we've pushed the system past its limit; in the context of edges representing pipes with water it means your pipe broke or leaked; if your edge is a wire with electric current it means your wire fried, melted or exploded due to too much electric current, this is not good, so we don't allow more flow than capacity.

Each edge in the flow graph has a certain flow and capacity specified by the fraction adjacent to each edge. Originally, the flow through each edge is 0 and the capacity is a non negative value.

To find the maximum flow (and min-cut as a by product), the Ford-Fulkerson method repeatedly finds augmenting paths through the residual graph and augments the flow until no more augmenting paths can be found. So your probably asking yourself: What is an augmenting path, what the heck is the residual graph and what does it mean to augment the flow? Let me explain

An augmenting path is a path of edges in the residual graph with capacity greater than zero from the source s to the sink t. In orange here I have highlighted a possible augmenting path. The key thing to remember about an augmenting path is that it can only flow through edges which aren't fully saturated yet. In fact, you know you've achieved the maximum flow when there are no more augmenting paths left to be found. How to actually find augmenting paths is left unspecified in the Ford-Folkerson method, but lets assume we use a DFS.

Something else to know is that every augmenting path will have what I call a "bottleneck value" which is the “smallest” edge on the path. You can find the value of the bottleneck by taking the difference between the capacity and the current flow for edge edge, so for this augmenting path the bottleneck value is 6. We can use the bottleneck value to augment the flow along the path.

Augmenting the flow means to update the flow values of the edges along the augmenting path. You can see here that I've increased the flow of each edge along the augmenting path by exactly 6 units.

However, we're not done augmenting the flow, we not only need to increase the flow going forwards, but we also need to decrease the flow going backwards in the residual edges by the same bottleneck value.

The logic behind having residual edges is to "undo" bad choices of augmenting paths which do not lead to a maximum flow. Effectively, we don't know which are the best or even correct augmenting paths to take, so this is a mechanism to enable us to freely find any augmenting path without having to worry whether we'll be able to achieve the maximum flow. It should be mentioned that residual edges become valid edges to take when finding augmenting paths in later iterations.

If we take a step back, you can think of every edge in the original graph as having a residual edge with a flow/capacity of 0/0 which is not usually shown.
Now that we know about residual edges, the term "residual graph" is the graph which also contains the residual edges, not just the original edges. Generally when I mention the flow graph, I mean the residual graph.

Here's a good question you might have at this point: 
Q: The shown residual edges have a capacity of 0? Aren't those forbidden? How does that work?
A: Here's the thing, with this method of augmenting the flow, you have to think of the remaining capacity of an edge e (residual or not) as: e.capacity - e.flow,
This ensures that the remaining capacity of an edge is always non-negative (even if the flow can be negative). For example, in the residual edges we have right now, 0 minus minus six is 6, so those residual edges actually have a capacity of 6 if you will.

The Ford-Fulkerson method continues finding augmenting paths and augments the flow until no more augmenting paths from s -> t exist. A key realization to make at this point is that the sum of the bottlenecks found in each augmenting path is equal to the max-flow!

Let's keep finding augmenting paths. Remember that we can only select edges whose remaining capacity is greater than zero to be part of an augmenting.

The bottleneck for this augmenting path is 4 since 4 is the minimum of all the remaining capacities.

Then augment the flow for all forward and residual edges.

<press>

Here's another valid augmenting path from the source to the sink. You'll notice that we're actually using one of the residual edges we created earlier in this path. You'll also notice thhat there are two purple edges in this slide, this is a coincidence since both those edges have the same bottleneck value of 6.

Then augment the flow as we do.

<press>

I'll let the animation plat for this next one

<press>

<press>

<press>

<press>





There's another topic I want to talk about which is maintaining non-negative flow. Currently, it’s possible to have negative flow on residual edges because of how we’ve decided on augmenting the flow which is to increase the flow on the forward edge and decrease the flow on the residual edge by the same amount.

This isn’t necessarily bad, but it’s surely not intuitive. Furthermore, negative flow doesn’t play well with min-cost max-flow algorithms which is a topic we’ll encounter later.

So the main issue is that we've allowing flow to be subtracted from the residual edge.

An alternative way of augmenting the flow is to lift the restriction that the edge capacity must remain constant and treat it as a dynamic value that can be adjusted.
One way of interpreting this new way of augmenting the flow is to understand that subtracting flow from the residual edge is equivalent to transferring capacity from the forward edge to the residual edge. This eliminates any negative values we previously had.

One consequence of this is that the bottleneck value is no longer calculated as edge.capacity - edge.flow for all edges along the augmenting path, but rather the minimum edge.capacity of all edges along the path.

Furthermore, the “original capacity” of an edge is lost in some sense because the capacity is treated as a dynamic value. However, this value can be retrieved by adding the capacity of the forward and residual edge. However, I do believe that overall this approach is better than the former for calculating the max-flow, at least it makes debugging easier IMO.




In terms of the time complexity, the Ford-Fulkerson derives its complexity from how augmenting paths are found which is left as an unspecified detail. If you assume that finding augmenting paths are found using a DFS then the hold algorithm runs in big O of f times E where f is the max-flow and E is the number of edges.

Here's a graph we can use to derive that time complexity. Suppose the side edges have very high capacity values of 100 and the middle edge has a capacity of 1. You can clearly tell that the max flow should be 200 because you can run two augmenting paths with flow values of 100 running on the top and bottom of the graph from the source to the sink.

However, recall that a DFS traversal is essentially random, so it's possible to pick the middle edge every time limiting your flow to 1 because that's the value of the bottleneck.

When we picked the middle edge in the last iteration, that decreased the flow on the residual edge, enabling flow to run through that edge in this iteration. So it's entirely possible that we select the middle edge again but this time through the residual edge limiting the flow value to 1.

This results in flipping back and forth between the same two alternating paths for 200 iterations…

<press>

<press>

Luckily much faster algorithms and heuristics exist to find maximum flow such as: Edmond's-Karp which is Ford-Fulkerson but instead of using a DFS you use a BFS to find the shorting augmenting path from the source to the sink every time. There's also capacity scaling which is this idea of picking larger path first to reduce the number of paths you need to find which works really well from my empirical tests. Then there's Dinic's which uses a combination for a BFS to first find a directed layered graph that guides edges towards the sink and then uses a DFS to actually find the augmenting paths. There's also this idea of these push-relabel algorithms which work differently than algorithms that find augmenting paths, instead they maintain this concept of a "preflow" to find the maximum flow of a network.
Please be mindful that the time complexities for flow algorithms are very pessimistic. In practice, they tend to operate much faster, making it hard to compare the performance of flow algorithms solely based on complexity.

Awesome well thank you for watching, next video we'll be going over some source code so stick around. Please like this video if you learned something and subscribe for more mathematics and computer science videos.

---------------------------

… you must understand that bipartite graphs with weighted edges are a totally different beast than those with unweighted edges. The algorithms you need to use to solve this type of problem vary in significant ways.